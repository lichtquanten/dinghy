services:
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: host-production
      secrets:
        - dotenv_key
      args:
        ENV_FILE_ENCRYPTED: ${ENV_FILE_ENCRYPTED}
    ports:
      - "${API_PORT:-3000}:${API_CONTAINER_PORT:-3000}"
    env_file: ${ENV_FILE}
    restart: ${RESTART_POLICY:-unless-stopped}
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${API_CONTAINER_PORT:-3000}/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  mongo-express:
    image: mongo-express:latest
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "${MONGO_EXPRESS_PORT:-8081}:8081"
    environment:
      - ME_CONFIG_MONGODB_URL=${MONGO_USER_URI}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
    profiles:
      - debug-db

  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    environment:
      - REDIS_HOSTS=${REDIS_COMMANDER_HOSTS}
    profiles:
      - debug-cache

  ngrok:
    image: ngrok/ngrok:latest
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "4040:4040"
    command:
      - "http"
      - "http://api:${API_PORT}"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTH_TOKEN}
    profiles:
      - proxy
    networks:
      - app-network

networks:
  app-network:
    name: app-network
    driver: bridge

secrets:
  dotenv_key:
    file: .env/.env.keys
